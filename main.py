import os
import logging
import tempfile
import cv2
import telebot
from telebot import types
from utils import SLInference




logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class SignLanguageBot:
    def __init__(self, token, config_path):
        self.bot = telebot.TeleBot(token)
        self.config_path = config_path
        self.processor = SLInference(config_path)
        self.processor.start()
        self.setup_handlers()

    def setup_handlers(self):
        @self.bot.message_handler(commands=["start"])
        def start_message(message):
            self.show_main_menu(message.chat.id)

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callbacks(call):
            try:
                if call.data == "perevod":
                    self.handle_translation(call)
                elif call.data == "education":
                    self.show_education_menu(call)
                elif call.data == "edu_fraze":
                    self.show_phrases_page1(call, call.message.chat.id)
                elif call.data == "end_z":
                    self.show_main_menu(call.message.chat.id, call.message.message_id)
                elif call.data == "end_n":
                    self.show_education_menu(call)
                elif call.data == "edu_fraze3":
                    self.show_phrases_page3(call, call.message.chat.id)
                elif call.data == 'edu_fraze2':
                    self.show_phrases_page2(call, call.message.chat.id)
                elif call.data == "end_nn":
                    self.show_phrases_page1(call)

            except Exception as e:
                logger.error(f"Callback error: {str(e)}")
                self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

        @self.bot.message_handler(content_types=['video'])
        def handle_video(message):
            try:
                self.bot.send_chat_action(message.chat.id, 'typing')

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
                file_info = self.bot.get_file(message.video.file_id)
                downloaded_file = self.bot.download_file(file_info.file_path)

                with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as tmp_file:
                    tmp_file.write(downloaded_file)
                    video_path = tmp_file.name

                predictions = self.process_video(video_path)
                response = self.format_response(predictions)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="end_z"))
                self.bot.reply_to(message, response, reply_markup=markup)

            except Exception as e:
                logger.error(f"Error: {str(e)}")
                self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
            finally:
                if 'tmp_file' in locals():
                    os.remove(video_path)

    def show_main_menu(self, chat_id, message_id=None):
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –î–∏–ø—Ñ–µ–π–∫ü§ñ", callback_data="perevod")
        btn2 = types.InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ. –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–ø—Ñ–µ–π–∫–∏?üß†", callback_data="education")
        markup.add(btn1, btn2)
        text= "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –≥–ª–∞–∑ –∏ –º–∏–º–∏–∫–∏ –≤ –¥–∏–ø—Ñ–µ–π–∫–∞—Ö \nüëá–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É —Å–Ω–∏–∑—É –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ!üëá"
        self.bot.send_photo(chat_id, photo=open('welcome.jpg', 'rb'))



        if message_id:
            self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=markup
            )
        else:
            self.bot.send_message(chat_id, text, reply_markup=markup)

    def handle_translation(self, call):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í–´–•–û–î", callback_data="end_z"))

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üá∑üá∫ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –¥–∏–ø—Ñ–µ–π–∫–æ–º (–¥–æ 1 –º–∏–Ω—É—Ç—ã)\n–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–Ω—è—Ç—å –¥–∏–ø—Ñ–µ–π–∫ —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç!",
            reply_markup=markup
        )

    def show_education_menu(self, call):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–ß—Ç–æ —Ç–∞–∫–æ–µ –î–∏–ø—Ñ–µ–π–∫–∏?üìñ", callback_data="edu_fraze"),
            types.InlineKeyboardButton("–ö–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –î–∏–ø—Ñ–µ–π–∫–∏üîç", callback_data="edu_fraze2"),
            types.InlineKeyboardButton("–ö–∞–∫–∏–µ —Ç–∏–ø—ã –î–∏–ø—Ñ–µ–π–∫–æ–≤ –±—ã–≤–∞—é—Çü§ñ", callback_data="edu_fraze3"),
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–ê –ì–õ–ê–í–ù–£–Æ", callback_data="end_z")
        )

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏ —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å",
            reply_markup=markup
        )

    def create_phrases_markup(self, page):
        markup = types.InlineKeyboardMarkup()

        if page == 1:
            buttons = [
                ("‚¨ÖÔ∏è –ù–ê–ó–ê–î", "end_n"),
                (" –ù–ê –ì–õ–ê–í–ù–£–Æ ‚û°Ô∏è", "end_z")
            ]
        else:

            buttons = [
                ("‚¨ÖÔ∏è –ù–ê–ó–ê–î", "end_nn")
            ]

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        #for i in range(0, len(buttons), 2):
            #row = [types.InlineKeyboardButton(text, url=url) for text, url in buttons[i:i + 2]]
            #markup.add(*row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = [types.InlineKeyboardButton(text, callback_data=data) for text, data in buttons]
        markup.add(*nav_row)

        return markup

    def show_phrases_page2(self, call, chat_id):
        self.bot.send_video(chat_id, video=open('deepfakevideo2.mp4', "rb", ))
        self.bot.send_message(chat_id, text = '–ö–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –î–∏–ø—Ñ–µ–π–∫–∏?üîç\n–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è deepfake –ø–æ–∫–∞ –Ω–µ —Ç–∞–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞, —á—Ç–æ–±—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–≥ –µ–µ –∑–∞–º–µ—Ç–∏—Ç—å. –ö–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–º–æ–≥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–ª—É–±–æ–∫—É—é –ø–æ–¥–¥–µ–ª–∫—É:\n1‚É£ –û–±—ä–µ–∫—Ç –¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–µ—Ä–æ–≤–Ω–æ\n2‚É£ –ì–æ–ª–æ—Å –ø–ª–æ—Ö–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –¥–≤–∏–∂–µ–Ω–∏—è–º–∏ –≥—É–±\n3‚É£ –£ –º–æ–¥–µ–ª–µ–π –º–æ–∂–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Ü–≤–µ—Ç –ø—Ä–∞–≤–æ–≥–æ –∏ –ª–µ–≤–æ–≥–æ –≥–ª–∞–∑–∞\n4‚É£ –û–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç –≤–æ–æ–±—â–µ –Ω–µ –º–æ—Ä–≥–∞—Ç—å (–∏–ª–∏ –º–æ—Ä–≥–∞—Ç—å —Å—Ç—Ä–∞–Ω–Ω–æ)\nüé•–í—ã—à–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∏–¥–µ–æ –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∏–ø—Ñ–µ–π–∫–∏',
            reply_markup=self.create_phrases_markup(1)
        )


    def show_phrases_page3(self, call, chat_id):
        self.bot.send_video(chat_id, video=open('deepfakevideo3.mp4', "rb"))
        self.bot.send_message(chat_id,text='–ö–∞–∫–∏–µ —Ç–∏–ø—ã –¥–∏–ø—Ñ–µ–π–∫–æ–≤ –±—ã–≤–∞—é—Çüß†\n–ü–æ–Ω–∞—á–∞–ª—É –¥–∏–ø—Ñ–µ–π–∫–∏ –Ω–µ –±—ã–ª–∏ –æ—Å–æ–±–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã. –û –Ω–∏—Ö –∑–Ω–∞–ª —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–æ–π –∫—Ä—É–≥ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –û–¥–Ω–∞–∫–æ –≤ 2009 –≥–æ–¥—É –≤—ã—à–µ–ª —Ñ–∏–ª—å–º –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´–ê–≤–∞—Ç–∞—Ä¬ª. –û–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π —É–≤–∏–¥–µ–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –≤ –¥–µ–π—Å—Ç–≤–∏–∏\nüé•–í—ã—à–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∏–¥–µ–æ –æ —Ç–æ–º, –∫–∞–∫–∏–µ –¥–∏–ø—Ñ–µ–π–∫–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –Ω–∞—à–µ–π –∂–∏–∑–Ω–∏',
            reply_markup=self.create_phrases_markup(1)
        )

    def show_phrases_page1(self, call, chat_id):
        self.bot.send_video(chat_id, video=open('deepfakevideo1.mp4', "rb"))
        self.bot.send_message(chat_id, text='–ß—Ç–æ —Ç–∞–∫–æ–µ –î–∏–ø—Ñ–µ–π–∫–∏ü§ñ\n‚ùó–ú–Ω–æ–≥–∏–µ –ª—é–¥–∏ –Ω–µ –∑–Ω–∞—é—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–ø—Ñ–µ–π–∫. –≠—Ç–æ —Å–ª–æ–≤–æ –±—ã–ª–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –¥–≤—É—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π: deep learning (¬´–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ¬ª ‚Äî —Ç–µ—Ä–º–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π—Å—è –≤ —Å—Ñ–µ—Ä–µ –æ–±—É—á–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞) –∏ fake (¬´–ø–æ–¥–¥–µ–ª–∫–∞, —Ñ–∞–ª—å—à–∏–≤–∫–∞¬ª). –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, deepfake ‚Äî —ç—Ç–æ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è, –ª–∏—Ü–æ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ª–∏—Ü–æ–º –¥—Ä—É–≥–æ–≥–æ\nüé•–í—ã—à–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∏–¥–µ–æ –æ —Ç–æ–º, —á—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–ø—Ñ–µ–π–∫–∏',
            reply_markup=self.create_phrases_markup(1)
        )

    def process_video(self, video_path):
        predictions = []
        cap = cv2.VideoCapture(video_path)

        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break

            frame = cv2.resize(frame, (224, 224))
            self.processor.input_queue.append(frame)

            if self.processor.pred and self.processor.pred not in ['', 'no']:
                predictions.append(self.processor.pred)

        cap.release()
        return predictions

    def format_response(self, predictions):
        if not predictions:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∏–ø—Ñ–µ–π–∫"

        unique_gestures = []
        for gesture in predictions:
            if not unique_gestures or gesture != unique_gestures[-1]:
                unique_gestures.append(gesture)

        return "–í –¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ –ø—Ä–∏—Å—É—Ç–≤—É–µ—Ç –¥–∏–ø—Ñ–µ–π–∫ü§ñ"

    def run(self):
        logger.info("Bot started")
        self.bot.infinity_polling()



if __name__ == "__main__":
    TOKEN = "7790245695:AAG7OaWij5LXfEaWO2VyJzjSV61DK77Lsro"
    CONFIG_PATH = os.path.join("configs", "config.json")

    bot = SignLanguageBot(TOKEN, CONFIG_PATH)
    bot.run()
